syntax = "proto3";

package kvstore;

option go_package = "internal/api/protobuf";

service KVStoreService {
    // 设置键值对
    rpc Set(SetRequest) returns (SetResponse) {}
    // 获取键值对的值
    rpc Get(GetRequest) returns (GetResponse) {}
    // 删除键值对
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
    // 追加数据到键值对
    rpc Append(AppendRequest) returns (AppendResponse) {}
    // 文件ls
    rpc FileLs(FileLsRequest) returns (FileLsResponse) {} 
    // cd 
    rpc CdDir(CdDirRequest) returns (CdDirResponse) {}
    // mkdir
    rpc MakeDir(MakeDirRequest) returns (MakeDirResponse) {}
    //create file
    rpc CreateFile(CreateFileRequest) returns (CreateFileResponse) {}
}

// Set请求包含键、值和元数据
message SetRequest {
    string key = 1;
    bytes value = 2;
    MetaData meta = 3;
}

message SetResponse {
    bool success = 1;
}

message GetRequest {
    string key = 1;
    int64 clientId=2;
    int64 opId=3;
}

message GetResponse {
    bytes value = 1;
    bool success=2;
}

message DeleteRequest {
    string key = 1;
}

// Delete响应
message DeleteResponse {
    bool success = 1;
}

// Append请求
message AppendRequest {
    string key = 1;
    bytes value = 2; // 追加的数据
    MetaData meta = 3;
}

// Append响应
message AppendResponse {
    bool success = 1;
}

// 元数据信息
message MetaData {
    DataType type = 1;
    string location = 2;	
    int64 offset=3;    // 读/写操作的起始偏移量
	int64 size=4;   // 读/写操作的数据长度
}

enum DataType {
    KV_OBJ = 0;
    FILE = 1;
    BLOCK_DEVICE = 2;
}

message FileLsRequest {
    string path = 1; // 要列出文件的目录路径
}
message FileLsResponse {
    repeated string files = 1; // 目录中的文件列表
    bool success = 2;
}

message CdDirRequest{
    string path = 1; // 要切换的目录路径
}
message CdDirResponse{
    bool success = 1;
}

message MakeDirRequest{
    string path = 1; // 要创建的目录路径
}
message MakeDirResponse{
    bool success = 1;

}
message CreateFileRequest{
    string path = 1; // 要创建的文件路径
}

message CreateFileResponse{
    bool success = 1;
}